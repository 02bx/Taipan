namespace ES.Taipan.VulnerabilityEditor

open System
open System.Collections.Generic
open ES.Taipan.Inspector.AddOns.WebApplicationVulnerability
open ES.Taipan.Fingerprinter

[<AutoOpen>]
module internal Commands =    

    let printAllApplications(fingerprintRepo: FilesystemWebApplicationFingerprintRepository) =
        Console.WriteLine("-= Applications =-")
        fingerprintRepo.GetAllWebApplications()
        |> Seq.iter(fun app -> Console.WriteLine(app.Name))
        Console.WriteLine()

    let printAllVersions(fingerprintRepo: FilesystemWebApplicationFingerprintRepository) =
        let applicationName = readLine("Application")
        match fingerprintRepo.GetWebApplication(applicationName) with
        | Some app -> 
            Console.WriteLine("-= Application versions for: {0} =-", applicationName)
            app.Versions
            |> Seq.iter(fun ver -> Console.WriteLine(ver.Version))
            Console.WriteLine()
        | None -> 
            Console.WriteLine("Application '{0}' is not present the in repository, please add it first and then you can add vulnerabilities", applicationName)  
        
    let printAllVvulnerabilities(dataDirectory: String, fingerprintRepo: FilesystemWebApplicationFingerprintRepository) =
        let applicationName = readLine("Application")
        match fingerprintRepo.GetWebApplication(applicationName) with
        | Some app -> 
            let addOn = new WebApplicationVulnerabilityAddOn()
            let context = new ES.Taipan.Inspector.Context(new ES.Taipan.Inspector.FilesystemAddOnStorage(addOn, dataDirectory), fun _ -> ())
        
            Console.WriteLine("-= Application vulnerabilities for: {0} =-", applicationName)
            match context.AddOnStorage.ReadProperty<String list>(applicationName) with
            | Some vulns -> 
                if vulns.Length > 0 then
                    for vuln in vulns do
                        match context.AddOnStorage.ReadProperty<ApplicationVulnerabilityDescriptor>(app.Name + "_" + vuln) with
                        | Some vulnDesc -> 
                            Console.WriteLine("{0} - [{1}] {2}", vulnDesc.Impact, String.Join(",", vulnDesc.AffectedVersions), vulnDesc.VulnerabilityName)
                        | None -> failwith("Unable to find vulnerability details: " + vuln)
                else
                    Console.WriteLine("No vulnerabilities defined")
            | None -> Console.WriteLine("No vulnerabilities defined")
            Console.WriteLine()
        | None -> 
            Console.WriteLine("Application '{0}' is not present the in repository, please add it first and then you can add vulnerabilities", applicationName)  

    let insertVulnerability(dataDirectory: String, fingerprintRepo: FilesystemWebApplicationFingerprintRepository) =
        let application = readLine("Application")
        match fingerprintRepo.GetWebApplication(application) with
        | None -> 
            Console.WriteLine("Application '{0}' is not present the in repository, please add it first and then you can add vulnerabilities", application)            
        | _ ->
            let vulnerabilities = new HashSet<String>()
            let addOn = new WebApplicationVulnerabilityAddOn()
            let context = new ES.Taipan.Inspector.Context(new ES.Taipan.Inspector.FilesystemAddOnStorage(addOn, dataDirectory), fun _ -> ())

            let mutable finishVulnerability = false
            while not finishVulnerability do
                match context.AddOnStorage.ReadProperty<String list>(application) with
                | Some vulns -> 
                    vulns |> List.iter(fun v -> vulnerabilities.Add(v) |> ignore)
                    Console.WriteLine("[+] Current vulnerabilities:")
                    Console.WriteLine()
                    for vuln in vulns do
                        match context.AddOnStorage.ReadProperty<ApplicationVulnerabilityDescriptor>(application + "_" + vuln) with
                        | Some vulnDesc -> 
                            Console.WriteLine("\t{0} - [{1}] {2}", vulnDesc.Impact, String.Join(",", vulnDesc.AffectedVersions), vulnDesc.VulnerabilityName)
                        | None -> failwith("Unable to find vulnerability details: " + vuln)

                | None -> 
                    Console.WriteLine("[+] Create a new empty vulnerability list for application: {0}", application)
                    context.AddOnStorage.SaveProperty<String list>(application, [])

                Console.WriteLine()
                let vulnerability = readLine("Vulnerability title")
                let impact = readLine("Vulnerability impact [Informational|Low|Medium|High|Critical]")
                let affectedVersions = readLine("Affected version (eg. <=1.2.3.5, 2.0.5.3, >3.1.4, or inclusive range: 1.2.0-1.2.9)")
                let externalReferer = readLine("Comma separated, URL, CVE code or equivalent (eg. WPVDB-ID-1234 or CVE-2015-8562)")

                let vulnDescriptor = {
                    Id = Guid.NewGuid()
                    Application = application
                    AffectedVersions = affectedVersions.Split([|","|], StringSplitOptions.RemoveEmptyEntries) |> Array.toList
                    VulnerabilityName = vulnerability
                    Impact = impact
                    ExternalReferer = externalReferer
                }
    
                vulnerabilities.Add(vulnerability) |> ignore
                context.AddOnStorage.SaveProperty(application, vulnerabilities |> Seq.toList)
                context.AddOnStorage.SaveProperty(application + "_" + vulnerability, vulnDescriptor)
                Console.WriteLine("[+] Vulnerability '{0}' locally saved", vulnerability)

                finishVulnerability <- readLineWithDefault("Add another vuln? [y|n]", "y").Equals("n", StringComparison.OrdinalIgnoreCase)
                Console.WriteLine()