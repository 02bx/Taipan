namespace ES.Taipan.VulnerabilityEditor

open System
open System.Collections.Generic
open ES.Taipan.Inspector.AddOns.WebApplicationVulnerability
open ES.Taipan.Fingerprinter

[<AutoOpen>]
module internal Commands =    

    let printAllApplications(fingerprintRepo: FilesystemWebApplicationFingerprintRepository) =
        Console.WriteLine("-= Applications =-")
        fingerprintRepo.GetAllWebApplications()
        |> Seq.iter(fun app -> Console.WriteLine(app.Name))
        Console.WriteLine()

    let printAllVersions(fingerprintRepo: FilesystemWebApplicationFingerprintRepository) =
        let applicationName = readLine("Application")
        match fingerprintRepo.GetWebApplication(applicationName) with
        | Some app -> 
            Console.WriteLine("-= Application versions for: {0} =-", applicationName)
            app.Versions
            |> Seq.iter(fun ver -> Console.WriteLine(ver.Version))
            Console.WriteLine()
        | None -> 
            Console.WriteLine("Application '{0}' is not present the in repository.", applicationName)  
        
    let printAllVvulnerabilities(dataDirectory: String, fingerprintRepo: FilesystemWebApplicationFingerprintRepository) =
        let applicationName = readLine("Application")
        let addOn = new WebApplicationVulnerabilityAddOn()
        let context = new ES.Taipan.Inspector.Context(new ES.Taipan.Inspector.FilesystemAddOnStorage(addOn, dataDirectory), fun _ -> ())
        
        Console.WriteLine("-= Application vulnerabilities for: {0} =-", applicationName)
        let allVulns = context.AddOnStorage.GetProperties<ApplicationVulnerabilityDescriptor>(fun v -> v.Application.Equals(applicationName, StringComparison.OrdinalIgnoreCase))
        if allVulns |> Seq.isEmpty then
            Console.WriteLine("No vulnerabilities defined")
        else
            allVulns
            |> Seq.iter(fun vulnDesc ->
                Console.WriteLine("{0} - [{1}] {2}", vulnDesc.Impact, String.Join(",", vulnDesc.AffectedVersions), vulnDesc.VulnerabilityName)
            )

    let insertVulnerability(dataDirectory: String, fingerprintRepo: FilesystemWebApplicationFingerprintRepository) =
        let mutable finishVulnerability = false

        while not finishVulnerability do
            let application = readLine("Application")
            if fingerprintRepo.GetWebApplication(application).IsNone then
                Console.WriteLine("Application '{0}' is not present the in repository!", application)

            let addOn = new WebApplicationVulnerabilityAddOn()
            let context = new ES.Taipan.Inspector.Context(new ES.Taipan.Inspector.FilesystemAddOnStorage(addOn, dataDirectory), fun _ -> ())
        
            Console.WriteLine()
            let vulnerability = readLine("Vulnerability title")
            let impact = readLine("Vulnerability impact [Informational|Low|Medium|High|Critical]")
            let affectedVersions = readLine("Comma separated affected version (eg. <=1.2.3.5, 2.0.5.3, >3.1.4, or inclusive range: 1.2.0-1.2.9)")
            let externalReferer = readLine("Comma separated, URL, CVE code or equivalent (eg. WPVDB-ID-1234 or CVE-2015-8562)")
            let additionalNotes = readLineWithDefault("Additional note", "N/A")

            let vulnDescriptor = {
                Id = Guid.NewGuid()
                Application = application
                AffectedVersions = affectedVersions.Split([|","|], StringSplitOptions.RemoveEmptyEntries) |> Array.toList
                VulnerabilityName = vulnerability
                Impact = impact
                ExternalReferer = externalReferer
                Note = additionalNotes
            }
    
            let propertyName = application + "_" + vulnerability
            context.AddOnStorage.SaveProperty(propertyName, vulnDescriptor)
            Console.WriteLine("[+] Vulnerability '{0}' locally saved", vulnerability)

            Console.WriteLine()
            finishVulnerability <- readLineWithDefault("Add another vuln? [y|n]", "y").Equals("n", StringComparison.OrdinalIgnoreCase)
            Console.WriteLine()