namespace ES.Taipan.Inspector

open System
open System.Collections.Generic
open System.Xml.Linq
open System.Linq
open ES.Taipan.Infrastructure.Validation

type VulnerabilityScannerSettings() = 
    let x(str) = XName.Get str

    /// If true activate all loaded addOns
    member val ActivateAllAddOns = true with get, set

    /// If ActivateAllAddOns is false the addOn with the Id present will be activated
    member val AddOnIdsToActivate = new List<Guid>() with get, set

    /// Specify which path must not be analyzed for vulnerabilities
    member val BlacklistedPattern = new List<String>() with get, set

    member this.ToXml() =
        let addOnIdsToActivate = new XElement(x"AddOnIdsToActivate")
        this.AddOnIdsToActivate
        |> Seq.iter (fun addOnId -> addOnIdsToActivate.Add(new XElement(x"AddOnId", addOnId)))

        let blacklistedPattern = new XElement(x"BlacklistedPattern")
        this.BlacklistedPattern
        |> Seq.iter (fun ext -> blacklistedPattern.Add(new XElement(x"Pattern", ext.Trim())))

        let doc =
          new XDocument(
            new XElement(x"VulnerabilityScannerSettings",
              new XElement(x"ActivateAllAddOns", this.ActivateAllAddOns),
              addOnIdsToActivate,
              blacklistedPattern
            )
          )
              
        doc.ToString()

    member this.AcquireSettingsFromXml(xmlSettings: String) =
        notEmpty xmlSettings "xmlSettings"

        let doc = XDocument.Parse(xmlSettings)
        let root = doc.Element(x"VulnerabilityScannerSettings")

        root.Element(x"AddOnIdsToActivate").Elements(x"AddOnId")
        |> Seq.map (fun xelem -> Guid.Parse(xelem.Value))
        |> Seq.iter this.AddOnIdsToActivate.Add

        root.Element(x"BlacklistedPattern").Elements(x"Pattern")
        |> Seq.map (fun xelem -> xelem.Value)
        |> Seq.iter this.BlacklistedPattern.Add
        
        this.ActivateAllAddOns <- Boolean.Parse(root.Element(x"ActivateAllAddOns").Value)
            